################################  Lisense  ###################################
All codes allow freely employed academically. Please acknowledge the paper.
##########################################################################

###############################  Introduction  ################################
The SDPED model and the employed loss functions are in ''SDPED_Model.py''.
To train the model, please use ''Main.py'', set the paths in it and run.
Assisted codes are in ''Others.py'', including data augmentation codes and prediction-saved codes.
The 3 abovementioned files are in the ''Main Codes py''.
##########################################################################

###############################  Evaluation  ##################################
To assess the results by the standard evaluation algorithm, please use the Matlab codes, set the patterns and run.
#########
The results on the subjective dataset BRIND provided by me are in the ''Predictions and evaluations 0.003 BRIND'', including prediction images, NMS results, and Matlab evaluation results.  One can directly confirm the results listed in the paper. The objective cross-test results on BRIND are in ''Cross-tests on BRIND'', one needs to calculate the CWBCE using codes in ''Others.py'' to confirm the results mentioned in the paper.
##########################################################################

################################  Implement  ################################
To duplicate the results, use datasets provided in ''BRIND Dataset'' and ''Cross-tests on BRIND''. They contain all employed data before augmentation and the suggested augmentation codes are in others. Note that the duplicate results might be a little different due to randomness.
#########
To implement models with pre-trained coefficients, please access checkpoints in ''Checkpoints (not including cross-tests)'' for the subjective dataset, where ''suggested'' represents the suggested augmentation method in the paper, while 'expired' represents the old augmentations which are only used to support the validity of 'suggested'. Or checkpoints in ''Cross-tests on BRIND'' for cross-tests (Compare the intrinsic abilities).
##########################################################################

##############################  Other Illustration  ##############################
Data augmentations on BIPED2 are not the one suggested in the paper (the new one does not add labels), and are only used to demonstrate that only 4-angle rotations with flips are sufficient. Checkpoints on BIPED2 new augmentation are epoch 50 while on old augmentation are epoch 25 because the number of images in the old augmentation is more than 4 times compared to the new augmentation.
#########
All checkpoints on BRIND including those in the cross-tests are epoch 100.
#########
A standard procedure can refer:
(1) Run ''Others.py'' to augment data. 
(2) Run ''Main.py'' to train models and save checkpoints. 
(3) Run ''Others.py'' to predict on the test set and save predictions. 
(4) Run the Matlab codes to evaluate results (for subjective datasets) or run ''Other.py'' to calculate CWBCE (for cross-tests).
#########
In a cross-test for models A and B:
(1) Model A and B are trained on ''BRIND Train 225 Data and Label'', obtaining checkpoints A1, B1, which are used to predict on ''BRIND Retrain 225 Data'' and ''BRIND Test 50 Data'' to generate the new labels. 
(2) A will retrain on the ''BRIND Retrain 225 Data'' with new labels generated by B1, obtaining checkpoint A2, while B will retrain on the ''BRIND Retrain 225 Data'' with new labels generated by A1, obtaining checkpoint B2.
(3) Checkpoint A2 is used to predict on ''BRIND Test 50 Data'' and then compare to the prediction provided by B1, while, checkpoint B2 is used to predict on ''BRIND Test 50 Data'' and then compare to the prediction provided by A1.
(4) Compare the scores above.
#########
For details, please refer to the paper.
##########################################################################